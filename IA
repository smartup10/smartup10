{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4d0b28e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "from IPython.display import clear_output\n",
    "from PIL import ImageGrab, ImageOps\n",
    "import pyautogui\n",
    "import time\n",
    "import numpy as np\n",
    "import time\n",
    "import threading\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "34b9ea54",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "vermelho=[0]\n",
    "azul=[0]\n",
    "while True:\n",
    "    image = ImageGrab.grab()\n",
    "    data = image.load()\n",
    "\n",
    "    for i in range(700, 705):\n",
    "        for j in range(200, 750):\n",
    "        #print(data[i,j])\n",
    "            if data[i, j] == (255,0,0) and vermelho[-1]==0:\n",
    "                clear_output()\n",
    "                print('vermelho')\n",
    "                vermelho.append(1)\n",
    "                azul.append(0)\n",
    "              \n",
    "                pyautogui.moveTo(x=900, y=700)\n",
    "                pyautogui.click(x=900, y=700)\n",
    "                time.sleep(1)\n",
    "                pyautogui.hotkey('ctrl', 'z')\n",
    "                pyautogui.hotkey('ctrl', 'v')\n",
    "\n",
    "            if data[i, j] == (0,0,255) and azul[-1]==0:\n",
    "                clear_output()\n",
    "                print('azul')\n",
    "                azul.append(1)\n",
    "                vermelho.append(0)\n",
    "               \n",
    "                pyautogui.moveTo(x=900, y=700)\n",
    "                pyautogui.click(x=900, y=700)\n",
    "                time.sleep(1)\n",
    "\n",
    "                pyautogui.hotkey('ctrl', 'z')\n",
    "                pyautogui.hotkey('ctrl', 'c')\n",
    "\n",
    "      #data[i,j]=(0,0,0,0)\\n\",\n",
    "     #image.show()\\n\",\n",
    "         #break\\n\"                time.sleep(1)\n",
    "                time.sleep(1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b1b47d6b",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "vermelho=[0]\n",
    "azul=[0]\n",
    "while True:\n",
    "    image = ImageGrab.grab()\n",
    "    data = image.load()\n",
    "\n",
    "    for i in range(700, 705):\n",
    "        for j in range(200, 750):\n",
    "        #print(data[i,j])\n",
    "            if data[i, j] == (255,0,0) and vermelho[-1]==0:\n",
    "                clear_output()\n",
    "                print('vermelho')\n",
    "                vermelho.append(1)\n",
    "                azul.append(0)\n",
    "              \n",
    "                pyautogui.moveTo(x=900, y=700)\n",
    "                pyautogui.click(x=900, y=700)\n",
    "                time.sleep(1)\n",
    "                pyautogui.hotkey('ctrl', 'z')\n",
    "                pyautogui.hotkey('ctrl', 'v')\n",
    "\n",
    "            if data[i, j] == (0,0,255) and azul[-1]==0:\n",
    "                clear_output()\n",
    "                print('azul')\n",
    "                azul.append(1)\n",
    "                vermelho.append(0)\n",
    "               \n",
    "                pyautogui.moveTo(x=900, y=700)\n",
    "                pyautogui.click(x=900, y=700)\n",
    "                time.sleep(1)\n",
    "\n",
    "                pyautogui.hotkey('ctrl', 'z')\n",
    "                pyautogui.hotkey('ctrl', 'c')\n",
    "\n",
    "      #data[i,j]=(0,0,0,0)\\n\",\n",
    "     #image.show()\\n\",\n",
    "         #break\\n\"                time.sleep(1)\n",
    "                time.sleep(1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7d80d5e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "while True:\n",
    "    pyautogui.hotkey('ctrl', 'z')\n",
    "    time.sleep(3)\n",
    "    pyautogui.hotkey('ctrl', 'c')\n",
    "    pyautogui.hotkey('ctrl', 'z')\n",
    "    time.sleep(3)\n",
    "    pyautogui.hotkey('ctrl', 'v')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "76d59387",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "pyautogui.position()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6e12d81f",
   "metadata": {},
   "outputs": [],
   "source": [
    "time.sleep(3)\n",
    "pyautogui.click(x=900, y=700)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3dc5c86b",
   "metadata": {},
   "outputs": [],
   "source": [
    "time.sleep(2)\n",
    "image = ImageGrab.grab()\n",
    "data = image.load()\n",
    "while True:\n",
    "    for i in range(700, 705):\n",
    "        for j in range(200, 750):\n",
    "            print(data[i,j])\n",
    "           \n",
    "\n",
    "            data[i,j]=(0,0,0,0)\n",
    "    image.show()\n",
    "    break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a39df090",
   "metadata": {},
   "outputs": [],
   "source": [
    "#206,151,9 é comprado\n",
    "#(28, 143, 81) é vendido\n",
    "~/.jupyter/jupyter_notebook_config.py:"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
